@startuml tennisclub

'----------------
' CONTROLLERS
'----------------
class CourtController <<  RestController  >> {
    + CourtController(courtService: CourtService)
    + getCourts(): Collection<ResponseCourtDTO>
    + createCourt(court: CreateCourtDTO) : ResponseCourtDTO
    + updateCourt(id: Long, court: UpdateCourtDTO): ResponseCourtDTO
    + deleteCourt(id: Long)
}

class ReservationController <<  RestController  >> {
    + ReservationController(reservationService: ReservationService)
    + getReservations(phoneNumber: String, courtNumber: Long, pendingOnly: Boolean): Collection<ResponseReservationDTO>
    + createReservation(reservation: CreateReservationDTO) : ResponseReservationDTO
    + updateReservation(id: Long, reservation: BaseReservationDTO): ResponseReservationDTO
    + deleteReservation(id: Long)
}

class SurfaceController <<  RestController >> {
    + SurfaceController(surfaceService: SurfaceService)
    + getSurfaces(): Collection<ResponseSurfaceDTO>
    + createSurface(surface: CreateSurfaceDTO) : ResponseSurfaceDTO
    + updateSurface(surface: CreateSurfaceDTO): ResponseSurfaceDTO
    + deleteSurface(id: Long)
}

class AuthController <<  RestController  >> {
   + AuthController(authService: AuthService)
   + login(request: HttpServletRequest)
}

'----------------
' SERVICES
'----------------
class CourtService <<  Service  >> {
    + CourtService(courtRepository: ICourtRepository, surfaceService: SurfaceService)
    + getCourts(): Collection<ResponseCourtDTO>
    + createCourt(court: CreateCourtDTO) : ResponseCourtDTO
    + updateCourt(court: UpdateCourtDTO): ResponseCourtDTO
    + deleteCourt(id: Long)
    + checkExistingCourt(id: Long) : Court
}

class ReservationService <<  Service  >> {
    - MINIMAL_RESERVATION_DURATION_IN_MINUTES: long
    + ReservationService(reservationRepository: IReservationRepository, userService: UserService, courtService: CourtService)
    + getReservations(phoneNumber: String, courtNumber: Long, orderByCreation: Boolean): Collection<ResponseReservationDTO>
    + createReservation(dto: CreateReservationDTO) : BigDecimal
    + updateReservation(id: Long, dto: BaseReservationDTO): ResponseReservationDTO
    + deleteReservation(id: Long)
    - validateReservation(id: Long): Reservation
    - validateUser(dto: CreateReservationDTO): User
    - validateInputs(dto: BaseReservationDTO)
    - baseInputValidation(dto: BaseReservationDTO): Map<String, String>
    - createReservationInputValidation(dto: CreateReservationDTO): Map<String, String>
    - resolvePrice(id: Long): BigDecimal
}

class UserService <<  Service  >> {
    + UserService(userRepository: IUserRepository, smsService: ISmsService)
    + getUsers() : Collection<User>
    + getUser(phoneNumber: String, password: String): User
    + createUser(phoneNumber: String, fullName: String) : User
    + authenticateUser(phoneNumber: String, password: String)
}

class SurfaceService <<  Service  >> {
    + SurfaceService(surfaceRepository: ISurfaceRepository, surfacePriceRepository: ISurfacePriceRepository)
    + getSurfaces(): Collection<ResponseSurfaceDTO>
    + createSurface(dto: CreateSurfaceDTO) : ResponseSurfaceDTO
    + updateSurface(id: Long, surface: CreateSurfaceDTO): ResponseSurfaceDTO
    + deleteSurface(id: Long)
    + checkExistingSurface(id: Long): Surface
    - validateInputs(dto: CreateSurfaceDTO)
    - validation(dto CreateSurfaceDTO): Map<String, String>
    - createNewPrice(pricePerMinuteInCzk: BigDecimal): SurfacePrice
    - checkSurfaceDependencies(id: Long)
}

class AuthService <<  Service  >> {
    + AuthService(jwtService: JwtService, userService: UserService)
    + authenticate(request: HttpServletRequest)
    - parseCredentials(authorizationHeader: String): String[]
}

class JwtService <<  Service  >> {
    + JwtService(jwtConfig: JwtConfig)
    + generateToken(claims: Map<String, Object>, phoneNumber: String) : String
    + getUserPhoneNumber(token: String): String
    + isTokenExpired(token: String): boolean
    - getSignInKey(): Key
    - extractAllClaims(token: String): Claims
}

interface ISmsService {
    + sendRegistrationMessage(phoneNumber: String, password: String)
}

class SmsTwilioService implements ISmsService

'----------------
' REPOSITORIES
'----------------
interface ICRUDRepository<E, K> {
    + getAll(): Collection<E>
    + getOne(key: K): E
    + create(item: E): E
    + update(item: E): E
    + delete(key: K)
}

interface ICRUDSoftDeleteRepository<E, K> extends ICRUDRepository{
    + getAll(includeDeleted: Boolean): Collection<E>
    + getOne(key: K, includeDeleted: Boolean): E
}

'surface repository
interface ISurfaceRepository extends ICRUDSoftDeleteRepository
class SurfaceH2Repository implements ISurfaceRepository {
    - entityManager: EntityManager
}

'court repository
interface ICourtRepository extends ICRUDSoftDeleteRepository
class CourtH2Repository implements ICourtRepository {
    - entityManager: EntityManager
}

'reservation repository
interface IReservationRepository extends ICRUDSoftDeleteRepository {
    + getAll(userPhoneNumber: String, courtId: Long, pendingOnly: Boolean): Collection<Reservation>
    + isIntervalConflicting(courtId: Long, heldAt: LocalDateTime, heldUntil: LocalDateTime): Boolean
    + getPrice(id: Long): BigDecimal
}
class ReservationH2Repository implements IReservationRepository {
    - entityManager: EntityManager
}

'user repository
interface IUserRepository extends ICRUDSoftDeleteRepository {
    + getOne(phoneNumber: String): User
}
class UserH2Repository implements IUserRepository {
    - entityManager: EntityManager
}

'----------------
' ENTITIES
'----------------
abstract class SoftDeletableEntity {
    # createdAt: LocalDateTime
    # deletedAt: LocalDateTime
    ~ createdAt()
}

class Reservation <<  Entity  >> extends SoftDeletableEntity {
    - id: Long
    - heldAt: LocalDateTime
    - heldUntil: LocalDateTime
}

class Court <<  Entity  >>  extends SoftDeletableEntity {
    - id: Long
}

class Surface <<  Entity  >> extends SoftDeletableEntity {
  - id: Long
}

class SurfacePrice <<  Entity  >> {
  - id: Long
  - validFrom: LocalDateTime
  - validTo: LocalDateTime
  - pricePerMinuteInCzk: BigDecimal
}

class User <<  Entity  >> extends SoftDeletableEntity {
  - id: Long
  - fullName: String
  - phoneNumber: String
  - password: String
  - salt: String
}

enum UserRole {
  USER = 1
  ADMIN = 2
}

enum GameType {
  SINGLES = 1
  DOUBLES = 2
}

User "1" <--o "0...*" Reservation: is created by <
Court "1" <--o "0...*" Reservation: is held at <
User "0...*" --> "1" UserRole: has >

GameType "1" <-- "0...*" Reservation : is of <

Surface "1" <--o "0...*" Court: has <
Surface "0...*" o--> "1" SurfacePrice: costs >

CourtService "0...*" o--> "1" ICourtRepository : has >
CourtController "0...*" o--> "1" CourtService : has >

ReservationController "0...*" o--> "1" ReservationService : has >
ReservationService "0...*" o--> "1" UserService : uses >
ReservationService "0...*" o-----> "1" IReservationRepository : has >
ReservationService "0...*" o--> "1" CourtService : uses >

UserService "0...*" o--> "1" ISmsService : uses >
UserService "0...*" o--> "1" IUserRepository : has >

AuthController "0...*" o--> "1" AuthService : has >
AuthService "0...*" o--> "1" JwtService : uses >
AuthService "0...*" o--> "1" UserService : uses >

SurfaceService "0...*" o--> "1" ISurfaceRepository : has >
SurfaceController "0...*" o--> "1" SurfaceService : has >
@enduml